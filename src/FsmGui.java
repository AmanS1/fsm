/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import com.mxgraph.layout.hierarchical.mxHierarchicalLayout;
import com.mxgraph.swing.mxGraphComponent;
import com.mxgraph.view.mxGraph;
import javafx.util.Pair;

import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.*;
import java.util.List;

/**
 * @author Aman Sariyev
 */
public class FsmGui extends javax.swing.JPanel {

	/**
	 * Creates new form FsmGui
	 */
	public FsmGui() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;

		aut = new Automaton();
		jPanel1 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		jLabel5 = new javax.swing.JLabel();
		jTextField1 = new javax.swing.JTextField();
		jTextField2 = new javax.swing.JTextField();
		jScrollPane1 = new javax.swing.JScrollPane();
		jScrollPane2 = new javax.swing.JScrollPane();
		jTextArea1 = new javax.swing.JTextArea();
		jButton1 = new javax.swing.JButton();
		jButton2 = new javax.swing.JButton();
		jButton3 = new javax.swing.JButton();
		jButton4 = new javax.swing.JButton();
		jButton5 = new javax.swing.JButton();
		jButton6 = new javax.swing.JButton();
		jButton7 = new javax.swing.JButton();

		setLayout(new java.awt.GridBagLayout());

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGap(0, 0, Short.MAX_VALUE)
		);
		jPanel1Layout.setVerticalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGap(0, 0, Short.MAX_VALUE)
		);

		jLabel1.setText("Import from File");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridwidth = 3;
		add(jLabel1, gridBagConstraints);

		jLabel2.setText("Regular Expression");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.gridwidth = 3;
		add(jLabel2, gridBagConstraints);

		jLabel3.setText("Automaton ($ = Epsilon)");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.gridwidth = 3;
		add(jLabel3, gridBagConstraints);

		jLabel4.setText("Conversion");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 6;
		gridBagConstraints.gridwidth = 3;
		add(jLabel4, gridBagConstraints);

		jLabel5.setText("Check acceptance");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 8;
		gridBagConstraints.gridwidth = 3;
		add(jLabel5, gridBagConstraints);

		jTextField1.setColumns(20);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.gridwidth = 3;
		add(jTextField1, gridBagConstraints);

		jTextField2.setColumns(20);
		jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyReleased(java.awt.event.KeyEvent evt) {
				jTextField2KeyReleased(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 9;
		gridBagConstraints.gridwidth = 3;
		add(jTextField2, gridBagConstraints);

		jTextArea1.setColumns(20);
		jTextArea1.setRows(20);
		jScrollPane1.setViewportView(jTextArea1);

		jScrollPane2.setViewportView(jPanel1);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 5;
		gridBagConstraints.gridwidth = 3;
		add(jScrollPane1, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 4;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridheight = 11;
		add(jScrollPane2, gridBagConstraints);

		jScrollPane2.setPreferredSize(new java.awt.Dimension(600, 600));

		jButton1.setText("RegExp");
		jButton1.addActionListener(this::jButton1ActionPerformed);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.gridwidth = 2;
		add(jButton1, gridBagConstraints);

		jButton2.setText("Automaton");
		jButton2.addActionListener(this::jButton2ActionPerformed);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 1;
		add(jButton2, gridBagConstraints);

		jButton3.setText("Create");
		jButton3.addActionListener(this::jButton3ActionPerformed);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 3;
		add(jButton3, gridBagConstraints);

		jButton4.setText("Create");
		jButton4.addActionListener(this::jButton4ActionPerformed);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 5;
		add(jButton4, gridBagConstraints);

		jButton5.setText("To DFA");
		jButton5.addActionListener(this::jButton5ActionPerformed);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 7;
		gridBagConstraints.gridwidth = 2;
		add(jButton5, gridBagConstraints);

		jButton6.setText("To RegExp");
		jButton6.addActionListener(this::jButton6ActionPerformed);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 7;
		add(jButton6, gridBagConstraints);

		jButton7.setText("Check");
		jButton7.addActionListener(this::jButton7ActionPerformed);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 9;
		add(jButton7, gridBagConstraints);
	}// </editor-fold>//GEN-END:initComponents

	private void jButton1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
		JFileChooser jFileChooser = new JFileChooser();
		jFileChooser.setCurrentDirectory(new File("."));
		jFileChooser.setDialogTitle("Select File with Regular Expression");
		int returnVal = jFileChooser.showOpenDialog(FsmGui.this);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			File file = jFileChooser.getSelectedFile();
			List<String> lines = new ArrayList<>();
			try (BufferedReader br = new BufferedReader(new FileReader(file.getPath()))) {
				String sCurrentLine;
				while ((sCurrentLine = br.readLine()) != null) {
					lines.add(sCurrentLine);
				}
				if (lines.size() == 0) throw new Exception("File is empty");
			} catch (Exception e) {
				JOptionPane.showMessageDialog(null, e);
				return;
			}
			if (lines.size() > 1) JOptionPane.showMessageDialog(null, "Too many lines, only first taken");
			jTextField1.setText(lines.get(0));
		}
	}//GEN-LAST:event_jButton1ActionPerformed

	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
		JFileChooser jFileChooser = new JFileChooser();
		jFileChooser.setCurrentDirectory(new File("."));
		jFileChooser.setDialogTitle("Select File with Automaton");
		int returnVal = jFileChooser.showOpenDialog(FsmGui.this);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			File file = jFileChooser.getSelectedFile();
			List<String> lines = new ArrayList<>();
			try (BufferedReader br = new BufferedReader(new FileReader(file.getPath()))) {
				String sCurrentLine;
				while ((sCurrentLine = br.readLine()) != null) {
					lines.add(sCurrentLine);
				}
				if (lines.size() == 0) throw new Exception("File is empty");
			} catch (Exception e) {
				JOptionPane.showMessageDialog(null, e);
				return;
			}
			jTextArea1.setText((String.join("\n", lines)));
		}
	}//GEN-LAST:event_jButton2ActionPerformed

	private void jButton3ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
		List<Object> err = Parser.checkRegExp(jTextField1.getText());
		Highlighter highlighter = jTextField1.getHighlighter();
		Highlighter.Highlight[] highlights = highlighter.getHighlights();
		for (Highlighter.Highlight highlight : highlights) highlighter.removeHighlight(highlight);
		if (err == null) {
			aut = AutomatonUtils.convertRegExpToAutomaton(jTextField1.getText());
			jTextArea1.setText(aut.toString());
			checkAcceptability(aut, jTextField2.getText());
		} else {
			Highlighter.HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.pink);
			try {
				highlighter.addHighlight((Integer) err.get(1), (Integer) err.get(2), painter);
			} catch (BadLocationException e) {
				e.printStackTrace();
			}
			JOptionPane.showMessageDialog(null, err.get(0));
		}
	}//GEN-LAST:event_jButton3ActionPerformed

	private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
		Highlighter highlighter = jTextArea1.getHighlighter();
		Highlighter.Highlight[] highlights = highlighter.getHighlights();
		for (Highlighter.Highlight highlight : highlights) highlighter.removeHighlight(highlight);
		List<String> tokens = Lexer.tokenizeDesc(jTextArea1.getText());
		List<Integer> tokensPos = Lexer.tokenizeDescPos(jTextArea1.getText());
		List<Object> err = Parser.checkDesc(tokens);
		if (err == null) {
			aut = Parser.convertDescTokensToAutomaton(tokens);
			jTextField1.setText("");
			checkAcceptability(aut, jTextField2.getText());
		} else {
			Highlighter.HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.pink);
			try {
				highlighter.addHighlight(tokensPos.get((Integer) err.get(1)), tokensPos.get((Integer) err.get(2)), painter);
			} catch (Exception e) {
				e.printStackTrace();
			}
			JOptionPane.showMessageDialog(null, err.get(0));
		}
	}//GEN-LAST:event_jButton4ActionPerformed

	private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
		aut = AutomatonUtils.simplifyAutomaton(aut);
		jTextArea1.setText(aut.toString());
		checkAcceptability(aut, jTextField2.getText());
	}//GEN-LAST:event_jButton5ActionPerformed

	private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
		jTextField1.setText(AutomatonUtils.convertAutomatonToRegExp(aut));
	}//GEN-LAST:event_jButton6ActionPerformed

	private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
		JOptionPane.showMessageDialog(null, checkAcceptability(aut, jTextField2.getText()) ? "YES" : "NO");
	}//GEN-LAST:event_jButton7ActionPerformed

	private void jTextField2KeyReleased(java.awt.event.KeyEvent evt) {
		checkAcceptability(aut, jTextField2.getText());
	}

	private boolean checkAcceptability(Automaton aut, String input) {
		boolean acc = false;
		Map<Node, Integer> ids = new HashMap<>();
		List<Node> nodeById = new ArrayList<>();
		Set<Character> alphabet = new HashSet<>();
		AutomatonUtils.enumerateAutomaton(aut, ids, nodeById, alphabet);
		Queue<Pair<Integer, String>> q = new LinkedList<>();
		Set<Pair<Integer, String>> visited = new HashSet<>();
		Set<Integer> colored = new HashSet<>();
		int x;
		String y;
		q.add(new Pair<>(0, input));
		visited.add(new Pair<>(0, input));
		while (!q.isEmpty()) {
			x = q.peek().getKey();
			y = q.remove().getValue();
			for (Pair<Node, Character> j : nodeById.get(x).getTransitions()) {
				if (j.getValue() == '$' && visited.add(new Pair<>(ids.get(j.getKey()), y)))
					q.add(new Pair<>(ids.get(j.getKey()), y));
			}
			if (y.length() == 0) {
				colored.add(x);
				acc |= nodeById.get(x).isAccepting();
			} else {
				for (Pair<Node, Character> j : nodeById.get(x).getTransitions()) {
					if (j.getValue() == y.charAt(0) && visited.add(new Pair<>(ids.get(j.getKey()), y.substring(1))))
						q.add(new Pair<>(ids.get(j.getKey()), y.substring(1)));
				}
			}
		}
		drawFsm(new HashSet<>(colored));
		return acc;
	}

	private void drawFsm(Set<Integer> colored) {
		final mxGraph graph = new mxGraph();
		final Object parent = graph.getDefaultParent();
		graph.getModel().beginUpdate();
		Map<Integer, Object> vertices = new HashMap<>();
		Map<Node, Integer> ids = new HashMap<>();
		List<Node> nodeById = new ArrayList<>();
		Set<Character> alphabet = new HashSet<>();
		Set<String> temp;
		AutomatonUtils.enumerateAutomaton(aut, ids, nodeById, alphabet);
		for (int i = 0; i < ids.size(); i++) {
			vertices.put(i, graph.insertVertex(parent, null, String.format("q%d", i), 0, 0, 50, 30,
					String.format("defaultVertex;shape=%s%s", nodeById.get(i).isAccepting() ? "doubleEllipse" : "ellipse",
							(colored.contains(i)) ? ";fillColor=pink" : "")));
		}
		for (int i = 0; i < ids.size(); i++) {
			for (int j = 0; j < ids.size(); j++) {
				temp = new HashSet<>();
				Set<Pair<Node, Character>> trns = nodeById.get(i).getTransitions();
				for (Pair<Node, Character> trn : trns) {
					if (ids.get(trn.getKey()) == j) {
						temp.add(String.valueOf(trn.getValue()));
					}
				}
				if (!temp.isEmpty())
					graph.insertEdge(parent, null, String.join(",", temp), vertices.get(i), vertices.get(j),
							"defaultEdge;align=left");
			}
		}
		new mxHierarchicalLayout(graph).execute(graph.getDefaultParent());
		graph.getModel().endUpdate();
		mxGraphComponent graphComponent = new mxGraphComponent(graph);
		jPanel1.setLayout(new FlowLayout());
		if (jPanel1.getComponentCount() > 0) jPanel1.remove(0);
		jPanel1.add(graphComponent);
		jPanel1.revalidate();
		jPanel1.repaint();
		((JFrame) this.getRootPane().getParent()).pack();
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	private javax.swing.JButton jButton3;
	private javax.swing.JButton jButton4;
	private javax.swing.JButton jButton5;
	private javax.swing.JButton jButton6;
	private javax.swing.JButton jButton7;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JTextArea jTextArea1;
	private javax.swing.JTextField jTextField1;
	private javax.swing.JTextField jTextField2;
	// End of variables declaration//GEN-END:variables
	private Automaton aut;
}
